// // for login

//     {/* <Container className="d-flex justify-content-center ">
//     <Col xs={12} md={11} lg={7} xl={8} className="py-4 d-flex justify-content-center flex-column ">
//                 <p className="css-5fwy47">Confirm your cart details and pay</p>
//                 <div className="css-bln63c">
//                   <div className="px-3">
//                   <div className="d-flex justify-content-between">
//                   <span>
//                   <p className="css-1f8zht8 m-0">step 1</p>
//                   <p className="css-3i6ki3 m-0 loginhead">Logged in as:</p>
//                   <p className="css-1fhv1jd mt-1">uvanmadix6@gmail.com</p>
//                   </span>
//                   <div className="css-12v23mo">
//                     <img src={confirm} alt="img" />
//                   </div>
//                   </div>
//                   </div>   
//                   <div className="css-y8drlo my-2"></div>               
//                 <div className=" px-3">
//                 <span className="css-4wzvst">uvanmadix6@gmail.com <span className="css-1r88noe">(sign out)</span></span>
//                 <p className="css-egivn1 ">Please note you won't lose the items in your cart if you sign out.</p>
//                 <div className="lastbt  forw ">
//                 <span className="css-jh44gk">Continue</span>
//                 </div>
//                 </div>
//                 </div>

                
//               </Col>
//     </Container> */}



//     import React, { useState } from "react";
// import { useForm } from "react-hook-form";

// const LoginRegister = () => {
//   const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register
//   const { register, handleSubmit, formState: { errors } } = useForm();
//   const [errorMessage, setErrorMessage] = useState("");
//   const [successMessage, setSuccessMessage] = useState("");

//   const [formData, setFormData] = useState({
//     username: "",
//     password: "",
//     email: "",
//     phonenumber: "",
//   });

//   // Handle form input change (optional)
//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({
//       ...formData,
//       [name]: value,
//     });
//   };

//   // Handle form submission (login or register)
//   const onSubmit = async (data) => {
//     setErrorMessage("");
//     setSuccessMessage("");

//     try {
//       if (isLogin) {
//         // Login API using Fetch
//         const response = await fetch("http://localhost:5000/login", {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//           },
//           body: JSON.stringify({
//             username: data.username,
//             password: data.password,
//           }),
//         });

//         if (response.ok) {
//           const result = await response.json();
//           setSuccessMessage(result.message || "Login successful");
//         } else {
//           const errorResult = await response.json();
//           setErrorMessage(errorResult.message || "Invalid credentials");
//         }
//       } else {
//         // Register API using Fetch
//         const response = await fetch("http://localhost:5000/register", {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//           },
//           body: JSON.stringify({
//             username: data.username,
//             password: data.password,
//             email: data.email,
//             phonenumber: data.phonenumber,
//           }),
//         });

//         if (response.ok) {
//           const result = await response.json();
//           setSuccessMessage(result.message || "Registration successful");
//         } else {
//           const errorResult = await response.json();
//           setErrorMessage(errorResult.message || "Registration failed");
//         }
//       }
//     } catch (error) {
//       setErrorMessage("An error occurred: " + error.message);
//     }
//   };

//   // Toggle between Login and Register
//   const toggleForm = () => {
//     setIsLogin(!isLogin);
//     setErrorMessage(""); // Clear any error messages
//     setSuccessMessage(""); // Clear any success messages
//     setFormData({
//       username: "",
//       password: "",
//       email: "",
//       phonenumber: "",
//     }); // Reset form data
//   };









  
//   return (
//     <div className="login-register-container">
//       <div className="form-container">
//         <h2>{isLogin ? "Login" : "Register"}</h2>
//         <form onSubmit={handleSubmit(onSubmit)}>
//           {/* Username */}
//           <input
//             type="text"
//             name="username"
//             {...register("username", { required: "Username is required" })}
//             value={formData.username}
//             onChange={handleChange}
//             placeholder="Username"
//           />
//           {errors.username && <p className="error-message">{errors.username.message}</p>}

//           {/* Password */}
//           <input
//             type="password"
//             name="password"
//             {...register("password", { required: "Password is required" })}
//             value={formData.password}
//             onChange={handleChange}
//             placeholder="Password"
//           />
//           {errors.password && <p className="error-message">{errors.password.message}</p>}

//           {/* Register form inputs */}
//           {!isLogin && (
//             <>
//               {/* Email */}
//               <input
//                 type="email"
//                 name="email"
//                 {...register("email", { required: "Email is required" })}
//                 value={formData.email}
//                 onChange={handleChange}
//                 placeholder="Email"
//               />
//               {errors.email && <p className="error-message">{errors.email.message}</p>}

//               {/* Phone Number */}
//               <input
//                 type="text"
//                 name="phonenumber"
//                 {...register("phonenumber", { required: "Phone number is required" })}
//                 value={formData.phonenumber}
//                 onChange={handleChange}
//                 placeholder="Phone Number"
//               />
//               {errors.phonenumber && <p className="error-message">{errors.phonenumber.message}</p>}
//             </>
//           )}

//           {/* Submit Button */}
//           <button type="submit">{isLogin ? "Login" : "Register"}</button>
//         </form>

//         {/* Toggle between Login and Register */}
//         <p onClick={toggleForm} className="toggle-form">
//           {isLogin ? "Don't have an account? Register here" : "Already have an account? Login here"}
//         </p>

//         {/* Display success or error messages */}
//         {errorMessage && <p className="error-message">{errorMessage}</p>}
//         {successMessage && <p className="success-message">{successMessage}</p>}
//       </div>
//     </div>
//   );
// };

// export default LoginRegister; 



































// import React, { useEffect, useState } from "react";
// import { FaEye, FaEdit, FaTrash, FaPlus } from "react-icons/fa";
// import { FaExclamationTriangle, FaExclamationCircle, FaFileExport } from "react-icons/fa";
// import { FaFileCsv, FaFilePdf, FaFileExcel } from "react-icons/fa";
// import { Container, Row, Col, Button, Form, Table, Pagination, Modal, Dropdown } from "react-bootstrap";
// import axios from "axios";
// import * as XLSX from "xlsx";
// import jsPDF from "jspdf";
// import "jspdf-autotable";
// import autoTable from 'jspdf-autotable';

// const ProductManagement = () => {

//   const [currentPage, setCurrentPage] = useState(1);
//   const [itemsPerPage] = useState(10);
//   const [searchQuery, setSearchQuery] = useState("");
//   const [filterStatus, setFilterStatus] = useState("");

//   const [selectedItems, setSelectedItems] = useState([]);
//   const [selectedProduct, setSelectedProduct] = useState(null);
//   const [isEditModalOpen, setIsEditModalOpen] = useState(false);
//   const [isCatalogOpen, setIsCatalogOpen] = useState(false);
//   const [showDeleteModal, setShowDeleteModal] = useState(false);
//   const [showExportModal, setShowExportModal] = useState(false);

//   const [editFormData, setEditFormData] = useState({
//     mainCategory: "",
//     subCategory: "",
//     price: "",
//     quantity: "",
//     status: "",
//   });

//   const handleEditSubmit = async (event) => {
//     event.preventDefault();
//     if (!selectedProduct) return;

//     try {
//       const response =  await fetch(`http://localhost:7000/update/${selectedProduct._id}`, {
//         method: "PUT",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(editFormData),
//       });

//       if (!response.ok) throw new Error("Failed to update product");

//       console.log("Product updated successfully");
//       setIsEditModalOpen(false);
//       fetchProducts(); // Refresh product list
//     } catch (error) {
//       console.error("Error updating product:", error);
//     }
//   };

//   // âœ… Handle product deletion
//   const handleDelete = async (productId) => {
//     try {
//       const response = await fetch(`http://localhost:7000/delete/${productId}`,{
//         method: "DELETE",
//       });

//       if (!response.ok) throw new Error("Failed to delete product");

//       console.log("Product deleted successfully");
//       setShowDeleteModal(false);
//       fetchProducts(); // Refresh product list
//     } catch (error) {
//       console.error("Error deleting product:", error);
//     }
//   };
//   const [products, setProducts] = useState([]);
//   const [formData, setFormData] = useState({
//     mainCategory: "",
//     subCategory: "",
//     price: "",
//     quantity: "",
//     status: "",
//     image: null,
//   });

//   const fetchProducts = async () => {
//     try {
//       const response = await axios.get("http://localhost:7000/api/products");
//       console.log("API Response:", response.data); // Log response
  
//       if (response.status === 200 && Array.isArray(response.data)) {
//         setProducts(response.data);
//       } else {
//         console.error("Invalid response format:", response.data);
//       }setProducts
//     } catch (error) {
//       console.error("Error fetching products:", error);
//     }
//   };

//   useEffect(() => {
//     fetchProducts();
//   }, []);

//   console.log("Products state:", products); // Debugging


//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleFileChange = (e) => {
//     setFormData({ ...formData, image: e.target.files[0] });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const formDataToSend = new FormData();
//     Object.keys(formData).forEach(key => formDataToSend.append(key, formData[key]));

//     try {
//       await axios.post("http://localhost:7000/api/products", formDataToSend, {
//         headers: { "Content-Type": "multipart/form-data" },
//       });
//       fetchProducts();
//       setFormData({ mainCategory: "", subCategory: "", price: "", quantity: "", status: "", image: null });
//     } catch (error) {
//       console.error("Error adding product:", error);
//     }
//   };

//   const handleCheckboxChange = (id) => {
//     setSelectedItems(prev => prev.includes(id) 
//       ? prev.filter(itemId => itemId !== id) 
//       : [...prev, id]
//     );
//   };

//   const filteredProducts = products
//     .filter(product => filterStatus === "All" || product.status === filterStatus)
//     .filter(product => {
//       const searchLower = searchQuery.toLowerCase();
//       return (
//         product.mainCategory.toLowerCase().includes(searchLower) ||
//         product.subCategory.toLowerCase().includes(searchLower) ||
//         product.price.toString().includes(searchLower) ||
//         product.quantity.toString().includes(searchLower)
//       );
//     });

//   const indexOfLastItem = currentPage * itemsPerPage;
//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;
//   const currentItems = filteredProducts.slice(indexOfFirstItem, indexOfLastItem);

//   const paginate = (pageNumber) => setCurrentPage(pageNumber);

//   const handleExport = (type) => (e) => {
//     e.preventDefault();
//     if (selectedItems.length === 0) {
//       setShowExportModal(true);
//       return;
//     }

//     const exportData = products.filter(product => 
//       selectedItems.includes(product._id)
//     );

//     switch(type) {
//       case 'csv':
//         exportAsCSV(exportData);
//         break;
//       case 'excel':
//         exportAsExcel(exportData);
//         break;
//       case 'pdf':
//         exportAsPDF(exportData);
//         break;
//       default:
//         break;
//     }
//   };

//   const exportAsCSV = (data) => {
//     const headers = ["Main Category", "Sub Category", "Price", "Quantity", "Status"];
//     const csvData = [
//       headers,
//       ...data.map(item => [
//         item.mainCategory, 
//         item.subCategory, 
//         item.price,
//         item.quantity, 
//         item.status
//       ])
//     ];
  
//     const csvContent = csvData.map(row => row.join(",")).join("\n");
//     const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
//     const url = URL.createObjectURL(blob);
  
//     const link = document.createElement("a");
//     link.href = url;
//     link.setAttribute("download", "products.csv");
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//     URL.revokeObjectURL(url);
//   };

//   const exportAsExcel = (data) => {
//     const worksheet = XLSX.utils.json_to_sheet(data.map(item => ({
//       "Main Category": item.mainCategory,
//       "Sub Category": item.subCategory,
//       "Price": item.price,
//       "Quantity": item.quantity,
//       "Status": item.status
//     })));

//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, "Products");
//     XLSX.writeFile(workbook, "products.xlsx");
//   };

//   const exportAsPDF = (data) => {
//     const doc = new jsPDF();
//     doc.setFontSize(16);
//     doc.text("Product List", 14, 15);
    
//     autoTable(doc, {
//       head: [["Main Category", "Sub Category", "Price", "Quantity", "Status"]],
//       body: data.map(product => [
//         product.mainCategory,
//         product.subCategory,
//         `$${product.price}`,
//         product.quantity,
//         product.status
//       ]),
//       startY: 25,
//       theme: 'grid',
//       styles: { fontSize: 10 },
//       headStyles: { 
//         fillColor: [41, 128, 185],
//         textColor: 255,
//         fontStyle: 'bold'
//       }
//     });

//     doc.save("products.pdf");
//   };