// for login

    {/* <Container className="d-flex justify-content-center ">
    <Col xs={12} md={11} lg={7} xl={8} className="py-4 d-flex justify-content-center flex-column ">
                <p className="css-5fwy47">Confirm your cart details and pay</p>
                <div className="css-bln63c">
                  <div className="px-3">
                  <div className="d-flex justify-content-between">
                  <span>
                  <p className="css-1f8zht8 m-0">step 1</p>
                  <p className="css-3i6ki3 m-0 loginhead">Logged in as:</p>
                  <p className="css-1fhv1jd mt-1">uvanmadix6@gmail.com</p>
                  </span>
                  <div className="css-12v23mo">
                    <img src={confirm} alt="img" />
                  </div>
                  </div>
                  </div>   
                  <div className="css-y8drlo my-2"></div>               
                <div className=" px-3">
                <span className="css-4wzvst">uvanmadix6@gmail.com <span className="css-1r88noe">(sign out)</span></span>
                <p className="css-egivn1 ">Please note you won't lose the items in your cart if you sign out.</p>
                <div className="lastbt  forw ">
                <span className="css-jh44gk">Continue</span>
                </div>
                </div>
                </div>

                
              </Col>
    </Container> */}



    import React, { useState } from "react";
import { useForm } from "react-hook-form";

const LoginRegister = () => {
  const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register
  const { register, handleSubmit, formState: { errors } } = useForm();
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  const [formData, setFormData] = useState({
    username: "",
    password: "",
    email: "",
    phonenumber: "",
  });

  // Handle form input change (optional)
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Handle form submission (login or register)
  const onSubmit = async (data) => {
    setErrorMessage("");
    setSuccessMessage("");

    try {
      if (isLogin) {
        // Login API using Fetch
        const response = await fetch("http://localhost:5000/login", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username: data.username,
            password: data.password,
          }),
        });

        if (response.ok) {
          const result = await response.json();
          setSuccessMessage(result.message || "Login successful");
        } else {
          const errorResult = await response.json();
          setErrorMessage(errorResult.message || "Invalid credentials");
        }
      } else {
        // Register API using Fetch
        const response = await fetch("http://localhost:5000/register", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username: data.username,
            password: data.password,
            email: data.email,
            phonenumber: data.phonenumber,
          }),
        });

        if (response.ok) {
          const result = await response.json();
          setSuccessMessage(result.message || "Registration successful");
        } else {
          const errorResult = await response.json();
          setErrorMessage(errorResult.message || "Registration failed");
        }
      }
    } catch (error) {
      setErrorMessage("An error occurred: " + error.message);
    }
  };

  // Toggle between Login and Register
  const toggleForm = () => {
    setIsLogin(!isLogin);
    setErrorMessage(""); // Clear any error messages
    setSuccessMessage(""); // Clear any success messages
    setFormData({
      username: "",
      password: "",
      email: "",
      phonenumber: "",
    }); // Reset form data
  };









  
  return (
    <div className="login-register-container">
      <div className="form-container">
        <h2>{isLogin ? "Login" : "Register"}</h2>
        <form onSubmit={handleSubmit(onSubmit)}>
          {/* Username */}
          <input
            type="text"
            name="username"
            {...register("username", { required: "Username is required" })}
            value={formData.username}
            onChange={handleChange}
            placeholder="Username"
          />
          {errors.username && <p className="error-message">{errors.username.message}</p>}

          {/* Password */}
          <input
            type="password"
            name="password"
            {...register("password", { required: "Password is required" })}
            value={formData.password}
            onChange={handleChange}
            placeholder="Password"
          />
          {errors.password && <p className="error-message">{errors.password.message}</p>}

          {/* Register form inputs */}
          {!isLogin && (
            <>
              {/* Email */}
              <input
                type="email"
                name="email"
                {...register("email", { required: "Email is required" })}
                value={formData.email}
                onChange={handleChange}
                placeholder="Email"
              />
              {errors.email && <p className="error-message">{errors.email.message}</p>}

              {/* Phone Number */}
              <input
                type="text"
                name="phonenumber"
                {...register("phonenumber", { required: "Phone number is required" })}
                value={formData.phonenumber}
                onChange={handleChange}
                placeholder="Phone Number"
              />
              {errors.phonenumber && <p className="error-message">{errors.phonenumber.message}</p>}
            </>
          )}

          {/* Submit Button */}
          <button type="submit">{isLogin ? "Login" : "Register"}</button>
        </form>

        {/* Toggle between Login and Register */}
        <p onClick={toggleForm} className="toggle-form">
          {isLogin ? "Don't have an account? Register here" : "Already have an account? Login here"}
        </p>

        {/* Display success or error messages */}
        {errorMessage && <p className="error-message">{errorMessage}</p>}
        {successMessage && <p className="success-message">{successMessage}</p>}
      </div>
    </div>
  );
};

export default LoginRegister; 
